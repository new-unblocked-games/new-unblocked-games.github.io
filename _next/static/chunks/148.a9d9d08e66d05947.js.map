{"version":3,"file":"static/chunks/148.a9d9d08e66d05947.js","mappings":"yIA2FA,UAxFyB,SAAQ,G,IAALA,EAAO,EAAPA,QACUC,GAAAA,EAAAA,EAAAA,WAAS,GAAtCC,EAA6BD,EAAe,GAAhCE,EAAiBF,EAAe,GACrBA,GAAAA,EAAAA,EAAAA,UAAS,GAAhCG,EAAuBH,EAAW,GAAzBI,EAAcJ,EAAW,GACnCK,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAWD,EAAAA,EAAAA,QAAO,CAAEE,EAAG,EAAGC,IAAK,KAErCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,SAACC,GACvB,GAAIX,EAAY,CACd,IAAMY,EAASN,EAASO,QAAQL,IAAMG,EAAMG,QAAUR,EAASO,QAAQN,EACvEJ,EAAWS,KAITG,EAAgB,WACpBd,GAAc,IAGVe,EAAkB,SAACL,GACvB,GAAIX,EAAY,CACd,IAAMiB,EAAQN,EAAMO,QAAQ,GACtBN,EAASN,EAASO,QAAQL,IAAMS,EAAMH,QAAUR,EAASO,QAAQN,EACvEJ,EAAWS,KAITO,EAAiB,WACrBlB,GAAc,IAQhB,OALAmB,OAAOC,iBAAiB,YAAaX,GACrCU,OAAOC,iBAAiB,UAAWN,GACnCK,OAAOC,iBAAiB,YAAaL,EAAiB,CAAEM,SAAS,IACjEF,OAAOC,iBAAiB,WAAYF,GAE7B,WACLC,OAAOG,oBAAoB,YAAab,GACxCU,OAAOG,oBAAoB,UAAWR,GACtCK,OAAOG,oBAAoB,YAAaP,GACxCI,OAAOG,oBAAoB,WAAYJ,MAExC,CAACnB,IAmBJ,OAAM,SACHwB,SAAM,CACLC,IAAKrB,EACLsB,MAAO,CACLC,SAAU,QACVnB,IAAM,GAAU,OAARN,EAAQ,MAChB0B,OAAQ,IACRC,OAAQ,UACRC,QAAU,MACVC,WAAY,OACZC,OAAQ,QAGVC,YA9BoB,SAACtB,GACvBV,GAAc,GACdK,EAASO,QAAU,CACjBN,EAAGI,EAAMG,QACTN,IAAKN,IA2BLgC,aAvBqB,SAACvB,GACxBV,GAAc,GACd,IAAMgB,EAAQN,EAAMO,QAAQ,GAC5BZ,EAASO,QAAU,CACjBN,EAAGU,EAAMH,QACTN,IAAKN,IAmBLJ,QAASA,E,mBAERqC,MAAG,CAACC,UAAU,c,mBACZC,MAAG,CACFC,IAAI,OACJC,MAAM,cACNC,IAAKC,EAAAA,EAAAA,GAAAA","sources":["webpack://_N_E/./src/components/MobileExitButton.js"],"sourcesContent":["import { useState, useEffect, useRef } from 'react';\r\nimport { Assets } from \"../../src/list/Assets\";\r\n\r\nconst MobileExitButton = ({ onClick }) => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [offsetY, setOffsetY] = useState(0);\r\n  const buttonRef = useRef(null);\r\n  const startPos = useRef({ y: 0, top: 0 });\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (event) => {\r\n      if (isDragging) {\r\n        const newTop = startPos.current.top + event.clientY - startPos.current.y;\r\n        setOffsetY(newTop);\r\n      }\r\n    };\r\n\r\n    const handleMouseUp = () => {\r\n      setIsDragging(false);\r\n    };\r\n\r\n    const handleTouchMove = (event) => {\r\n      if (isDragging) {\r\n        const touch = event.touches[0];\r\n        const newTop = startPos.current.top + touch.clientY - startPos.current.y;\r\n        setOffsetY(newTop);\r\n      }\r\n    };\r\n\r\n    const handleTouchEnd = () => {\r\n      setIsDragging(false);\r\n    };\r\n\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    window.addEventListener('mouseup', handleMouseUp);\r\n    window.addEventListener('touchmove', handleTouchMove, { passive: false });\r\n    window.addEventListener('touchend', handleTouchEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      window.removeEventListener('mouseup', handleMouseUp);\r\n      window.removeEventListener('touchmove', handleTouchMove);\r\n      window.removeEventListener('touchend', handleTouchEnd);\r\n    };\r\n  }, [isDragging]);\r\n\r\n  const handleMouseDown = (event) => {\r\n    setIsDragging(true);\r\n    startPos.current = {\r\n      y: event.clientY,\r\n      top: offsetY,\r\n    };\r\n  };\r\n\r\n  const handleTouchStart = (event) => {\r\n    setIsDragging(true);\r\n    const touch = event.touches[0];\r\n    startPos.current = {\r\n      y: touch.clientY,\r\n      top: offsetY,\r\n    };\r\n  };\r\n\r\n  return (\r\n    <button\r\n      ref={buttonRef}\r\n      style={{\r\n        position: 'fixed',\r\n        top: `${offsetY}px`,\r\n        zIndex: 1000,\r\n        cursor: 'pointer',\r\n        padding:  '0px',\r\n        background: \"none\",\r\n        border: 'none',\r\n        \r\n      }}\r\n      onMouseDown={handleMouseDown}\r\n      onTouchStart={handleTouchStart}\r\n      onClick={onClick}\r\n    >\r\n      <div className=\"mobile-exit\">\r\n        <img\r\n          alt=\"Back\"\r\n          title=\"Back button\"\r\n          src={Assets[0].mback_icon}\r\n        />\r\n      </div>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default MobileExitButton;\r\n"],"names":["onClick","useState","isDragging","setIsDragging","offsetY","setOffsetY","buttonRef","useRef","startPos","y","top","useEffect","handleMouseMove","event","newTop","current","clientY","handleMouseUp","handleTouchMove","touch","touches","handleTouchEnd","window","addEventListener","passive","removeEventListener","button","ref","style","position","zIndex","cursor","padding","background","border","onMouseDown","onTouchStart","div","className","img","alt","title","src","Assets"],"sourceRoot":""}